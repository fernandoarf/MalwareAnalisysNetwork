# -*- coding: utf-8 -*-
from django.shortcuts import render
from django.template import RequestContext
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse
from myproject.myapp.models import Document
from myproject.myapp.models import Path
from myproject.myapp.models import Connection
from myproject.myapp.forms import DocumentForm
from myproject.myapp.forms import ResultSearch
from django.shortcuts import render
from django.conf import settings
import subprocess
import os.path
import glob
import os
from json2html import *
import json
from django import template
from pathlib2 import Path as Paths
import re
import numpy as np
from sklearn.preprocessing import Imputer
from sklearn.cross_validation import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KDTree
import pickle


def upload(request):
    # Handle file upload
    if request.method == 'POST':
        form = DocumentForm(request.POST, request.FILES)
        if form.is_valid():

            my_file = Paths("/home/fernando/Desktop/myproject/media/samples/" + request.FILES['docfile'].name)
            if my_file.is_file():
                os.remove("/home/fernando/Desktop/myproject/media/samples/" + request.FILES[
                    'docfile'].name)  # remove duplicates
            newdoc = Document(docfile=request.FILES['docfile'])
            newdoc.save()
            my_file = '/home/fernando/Desktop/myproject/media/samples/' + request.FILES['docfile'].name
            pathtofile = my_file.encode('ascii', 'ignore')
            subprocess.call('/home/fernando/Desktop/myproject/myproject/myapp/submitsample.sh ' + pathtofile,
                            shell=True)
            latest_file_sha = max([os.path.join('/home/fernando/.cuckoo/storage/binaries', d) for d in
                                   os.listdir('/home/fernando/.cuckoo/storage/binaries')], key=os.path.getmtime)
            latest_file_sha = os.path.basename(latest_file_sha)
            latest_dir_analisys = os.path.basename(os.readlink('/home/fernando/.cuckoo/storage/analyses/latest'))
            filename = request.FILES['docfile'].name
            dirpath = '/home/fernando/.cuckoo/storage/analyses/' + str((int(latest_dir_analisys) + 1)) + '/'
            newinfo = Path(namefile=filename, idsha256=latest_file_sha, pathto=dirpath)  # Ok
            newinfo.save()
            print newinfo.idsha256
            # analisysinfo = Path.objects.create(namefile=filename,idsha256=latest_file_sha,pathto=dirpath)
            return render(request, 'submited.html',
                          {'latest_file_sha': latest_file_sha, 'dirpath': dirpath, 'filename': filename})


            # Redirect to the document list after POST
            # return HttpResponseRedirect(reverse('upload'))
    else:
        form = DocumentForm()  # A empty, unbound form

    # Render list page with the documents and the form
    return render(request, 'upload.html', {'form': form})


def list(request):
    if request.method == 'GET':
        dirtofile = request.GET.get('dir', '')
        if dirtofile != '':
            pathquery = dirtofile
            pathdata = Path.objects.get(pathto=pathquery)  # Ok
            print pathdata.pathto
            print pathdata.idsha256
            context = dashboardfunc(pathdata.pathto + 'reports/report.json')
            return render(request, 'analisys.html', context)
        else:
            query = Path.objects.all()
            for i in query:
                print i.namefile
            return render(request, 'list.html', {'query': query})


def submited(request):
    return render(request, 'list.html')


def index(request):
    return render(request, 'index.html')


def search(request):
    if request.method == 'POST':
        form = ResultSearch(request.POST)
        if form.is_valid():
            # Path.objects.filter(idsha256__contains=)
            sha256idquery = form.cleaned_data['id']
            # queryid=Path.objects.get(idsha256=sha256id)
            pathdata = Path.objects.get(idsha256=sha256idquery)  # Ok
            print pathdata.pathto
            print pathdata.idsha256
            context = dashboardfunc(pathdata.pathto + '/reports/report.json')            
            return render(request, 'analisys.html', context)


    else:
        return render(request, 'search.html')


def report(request):
    with open('/home/fernando/.cuckoo/storage/analyses/latest/reports/report.json') as data_file:
        filedata = data_file.read()
        filedata = filedata.replace('\n', '<br>')
    return render(request, 'report.html', {'filedata': filedata})


def dashboard(request):
    context = dashboardfunc('/home/fernando/.cuckoo/storage/analyses/latest/reports/report.json')
    return render(request, 'analisys.html', context)

def constructdataset(request):
    listOfConnections=[]
    listOfIds=[]
    numConn=0
    numReports=0
    dataset=[]
    listoffiles = glob.glob("/home/fernando/.cuckoo/storage/analyses/*/reports/report.json")
    for i in listoffiles:
        with open(i) as data_file:
            data = json.load(data_file)
            listOfIds.append(data['target']['file']['sha256']) #Store IDs
            if 'udp' in data['network']:
                dataUDP = data['network']['udp']
                numReports=numReports+1
                for j in dataUDP:
                    connData = j['dst']
                    if checkconnection(listOfConnections,connData)=='false':
                        listOfConnections.append(connData) #Store features
                        numConn=numConn+1
    dataset = np.zeros((numReports+1, numConn)) #Create bi-dimensional array to populate dataset
    listoffiles = glob.glob("/home/fernando/.cuckoo/storage/analyses/*/reports/report.json")
    index=0
    #Populate dataset
    for i in listoffiles:   
        with open(i) as data_file:
            data = json.load(data_file)
            if 'udp' in data['network']:
                dataUDP = data['network']['udp']
                for j in dataUDP:
                    connData = j['dst']
                    pos = findLabelPos(listOfConnections,connData)
                    if pos != -1:
                        dataset[index][pos] = dataset[index][pos] + 1
        index=index+1
    """with open('/media/Dataset.txt', 'wb') as fp:
        pickle.dump(dataset, fp)
    with open('/media/Labels.txt', 'wb') as fp:
        pickle.dump(listOfIds, fp)
    with open('/media/Features.txt', 'wb') as fp:
        pickle.dump(listOfConnections, fp)

        """
    tree = KDTree(dataset, leaf_size=2)            
    dist, ind = tree.query([dataset[0]], k=5)                
    listIds=[]
    for i in np.nditer(ind):
        listIds.append(listOfIds[i])
    context = {
        'listIds': listIds,
     }
    return render(request, 'artificialdash.html',context)
    """with open ('outfile', 'rb') as fp:
        itemlist = pickle.load(fp)
        tree = KDTree(itemlist, leaf_size=2)            
        dist, ind = tree.query([itemlist[0]], k=3)                
        print(ind)  # indices of 3 closest neighbors
        #[0 3 1]
        print(dist)  # distances to 3 closest neighbors
        #[ 0.          0.19662693  0.29473397]
"""


def findLabelPos(Labels,conn):
    pos=0
    for i in Labels:
        if i==conn:
            return pos
        else:
            pos=pos+1
    pos==-1

def datasetDash(request):
    return render(request, 'artificialdash.html')


def connectioninfo(request):
    if request.method == 'GET':
        connection = request.GET.get('conn', '')
        if connection != '':
            querydatasrc = Connection.objects.filter(sourceconnection=connection)
            querydatadst = Connection.objects.filter(dstconnection=connection)
            pathdata = Path.objects.get(idsha256=querydatadst[0].idsha)  # Ok
            json_data = []
            json_data_links = []
            datafocal={}
            connectList = []
            """idsha = models  .CharField(max_length=100)
            connectiontype = models.CharField(max_length=100)
            sourceconnection = models.CharField(max_length=100)
            dstconnection = models.CharField(max_length=100)
            sourceport = models.CharField(max_length=100)
            dstport = models.CharField(max_length=100)"""
            datafocal['id']=querydatadst[0].dstconnection
            datafocal['name']=querydatadst[0].dstconnection
            datafocal['type']="UDP"
            datafocal['fixed']="true"
            datafocal['x']="10"
            datafocal['y']="0"
            datafocal['hlink']=str(pathdata.pathto + '/reports/report.json')
            json_data.append(datafocal)
            
            for i in querydatadst:
                if checkconnection(connectList,i.sourceconnection) == 'false':
                    connectList.append(i.sourceconnection)
                    datanode={}
                    datalink={}
                    datanode['id']=i.sourceconnection
                    datanode['name']=i.idsha
                    datanode['type']="UDP"
                    datanode['hlink']="http://127.0.0.1:8000/malware/report/connectioninfo/?conn="+i.sourceconnection
                    datalink['sourceId'] = i.sourceconnection
                    datalink['linkName'] = str(i.dstport)
                    datalink['targetId'] = i.sourceconnection
                    json_data.append(datanode)
                    json_data_links.append(datalink)
                else:
                    for newlink in json_data_links:
                        if newlink['targetId'] == i.sourceconnection:
                            auxlinkname = str(i.dstport)
                            if auxlinkname.find(newlink['linkName'])==-1:
                                newlink['linkName'] = str(newlink['linkName'])+','+str(i.dstport)
            datanodes=json.dumps(json_data)
            datalinks=json.dumps(json_data_links)
            datafocal=json.dumps(datafocal)
            datanodes = datanodes.replace('"name"','name')
            datanodes = datanodes.replace('"hlink"','hlink')
            datanodes = datanodes.replace('"type"','type')
            datanodes = datanodes.replace('"id"','id')
            datanodes = datanodes.replace('"y": "0"','y: 0')
            datanodes = datanodes.replace('"x": "10"','x: 10')
            datanodes = datanodes.replace('"fixed": "true"','fixed: true')
            datalinks = datalinks.replace('"sourceId"','sourceId')
            datalinks = datalinks.replace('"linkName"','linkName')
            datalinks = datalinks.replace('"targetId"','targetId')
            context = {
            'querydatasrc': querydatasrc,
            'querydatadst': querydatadst,
            'json_data': json_data,
            }
            return render(request, 'connectioninfo.html', context)

def checkconnection(listconn, connection):
    connExists = 'false'
    for i in listconn:
        if connection == i:
            connExists = 'true'
            return connExists
    return connExists


def dashboardfunc (filepath):
    with open(filepath) as data_file:
        data = json.load(data_file)
        duration = data['info']['duration']
        infohtml = ''
        analisysinfohtml = ''
        networkudphtml = ''
        networktcphtml = ''
        networkdnshtml = ''
        networkdomainshtml = ''
        machinestatushtml = ''
        identsha = data['target']['file']['sha256']
        if data['info']['machine']:
            machinestatus = data['info']['machine']
            del machinestatus['label']
            machinestatus['Status'] = machinestatus['status']
            del machinestatus['status']
            machinestatus['Name'] = machinestatus['name']
            del machinestatus['name']
            machinestatus['Manager'] = machinestatus['manager']
            del machinestatus['manager']
            machinestatus['Started on'] = machinestatus['started_on']
            del machinestatus['started_on']
            machinestatus['Finished on'] = machinestatus['shutdown_on']
            del machinestatus['shutdown_on']
            machinestatushtml = json2html.convert(json=machinestatus)

        # Info

        if data['target']['file']:
            info = data['target']['file']
            del info['yara']
            del info['urls']
            del info['ssdeep']
            del info['sha1']
            info['File Name'] = info['name']
            del info['name']
            info['SHA256 Identification'] = info['sha256']
            del info['sha256']
            info['File Path'] = info['path']
            del info['path']
            info['File Type'] = info['type']
            del info['type']
            info['File Size'] = info['size']
            del info['size']
            info['MD5 Identification'] = info['md5']
            del info['md5']
            del info['crc32']
            del info['sha512']
            info['Duration'] = duration
            infohtml = json2html.convert(json=info)

        if data['debug']['log']:
            analisysinfo = data['debug']['log']
            analisysinfohtml = json2html.convert(json=analisysinfo)

        # UDP
        json_data = []
        json_data_links = []
        datafocal={}
        connectList = []
        if data['network']['udp']:
            networkudp = data['network']['udp']
            datafocal['id']=networkudp[0]['src']
            #datafocal['id']=str(data['target']['file']['SHA256 Identification'])
            datafocal['name']=str(data['target']['file']['SHA256 Identification'])
            datafocal['type']="UDP"
            datafocal['fixed']="true"
            datafocal['x']="10"
            datafocal['y']="0"
            datafocal['hlink']="http://127.0.0.1:8000/malware/report/connectioninfo/?conn="+networkudp[0]['src']
            json_data.append(datafocal)
            for i in networkudp:
                if checkconnection(connectList,i['dst']) == 'false':
                    connectList.append(i['dst'])
                    datanode={}
                    datalink={}
                    datanode['id']=i['dst']
                    datanode['name']=i['dst']
                    datanode['type']="UDP"
                    datanode['hlink']="http://127.0.0.1:8000/malware/report/connectioninfo/?conn="+i['dst']
                    datalink['sourceId'] = i['src']
                    datalink['linkName'] = str(i['dport'])
                    datalink['targetId'] = i['dst']
                    json_data.append(datanode)
                    json_data_links.append(datalink)
                else:
                    for newlink in json_data_links:
                        if newlink['targetId'] == i['dst']:
                            auxlinkname = str(i['dport'])
                            if auxlinkname.find(newlink['linkName'])==-1:
                                newlink['linkName'] = str(newlink['linkName'])+','+str(i['dport'])
                newconnection = Connection(idsha=identsha, connectiontype="udp", sourceconnection=i['src'],
                                           dstconnection=i['dst'], sourceport=i['sport'], dstport=i['dport'])
                newconnection.save()
                i['Destiny'] = i['dst']
                del i['dst']
                i['Source'] = i['src']
                del i['src']
                i['Time'] = i['time']
                del i['time']
                del i['offset']
                i['Destiny port'] = i['dport']
                del i['dport']
                i['Source port'] = i['sport']
                del i['sport']
            networkudphtml = json2html.convert(json=networkudp)

        if data['network']['tcp']:
            networktcp = data['network']['tcp']
            for i in networktcp:
                newconnection = Connection(idsha=identsha, connectiontype="udp", sourceconnection=i['src'],
                                           dstconnection=i['dst'], sourceport=i['sport'], dstport=i['dport'])
                newconnection.save()
                i['Destiny'] = i['dst']
                del i['dst']
                i['Source'] = i['src']
                del i['src']
                i['Time'] = i['time']
                del i['time']
                del i['offset']
                i['Destiny port'] = i['dport']
                del i['dport']
                i['Source port'] = i['sport']
                del i['sport']
            networktcphtml = json2html.convert(json=networktcp)

        if data['network']['dns']:
            networkdns = data['network']['dns']
            for i in networkdns:
                i['Type'] = i['type']
                del i['type']
                i['Request'] = i['request']
                del i['request']
                i['Answer'] = i['answers']
                del i['answers']
            networkdnshtml = json2html.convert(json=networkdns)

        if data['network']['domains']:
            networkdomains = data['network']['domains']
            for i in networkdomains:
                i['Domain'] = i['domain']
                del i['domain']
                i['IP'] = i['ip']
                del i['ip']
            networkdomainshtml = json2html.convert(json=networkdomains)
        datanodes=json.dumps(json_data)
        datalinks=json.dumps(json_data_links)
        datafocal=json.dumps(datafocal)
        datanodes = datanodes.replace('"name"','name')
        datanodes = datanodes.replace('"hlink"','hlink')
        datanodes = datanodes.replace('"type"','type')
        datanodes = datanodes.replace('"id"','id')
        datanodes = datanodes.replace('"y": "0"','y: 0')
        datanodes = datanodes.replace('"x": "10"','x: 10')
        datanodes = datanodes.replace('"fixed": "true"','fixed: true')
        datalinks = datalinks.replace('"sourceId"','sourceId')
        datalinks = datalinks.replace('"linkName"','linkName')
        datalinks = datalinks.replace('"targetId"','targetId')

        context = {
            'datanodes': datanodes,
            'datalinks': datalinks,
            'datafocal': datafocal,
            'infohtml': infohtml,
            'analisysinfohtml': analisysinfohtml,
            'networkudphtml': networkudphtml,
            'networktcphtml': networktcphtml,
            'networkdnshtml': networkdnshtml,
            'networkdomainshtml': networkdomainshtml,
            'machinestatushtml': machinestatushtml,
        }
        return context