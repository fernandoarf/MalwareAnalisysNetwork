# -*- coding: utf-8 -*-
from django.shortcuts import render
from django.template import RequestContext
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse
from myproject.myapp.models import Document
from myproject.myapp.models import Path
from myproject.myapp.forms import DocumentForm
from myproject.myapp.forms import ResultSearch
from django.shortcuts import render
from django.conf import settings
import subprocess
import os.path
import glob
import os
from json2html import *
import json
from django import template
from pathlib2 import Path as Paths





def upload(request):
    # Handle file upload
    if request.method == 'POST':
        form = DocumentForm(request.POST, request.FILES)
        if form.is_valid():

            my_file = Paths("/home/fernando/Desktop/myproject/media/samples/"+request.FILES['docfile'].name)
            if my_file.is_file():
                os.remove("/home/fernando/Desktop/myproject/media/samples/"+request.FILES['docfile'].name) #remove duplicates
            newdoc = Document(docfile=request.FILES['docfile'])
            newdoc.save()
            my_file = '/home/fernando/Desktop/myproject/media/samples/'+request.FILES['docfile'].name
            pathtofile = my_file.encode('ascii','ignore')
            subprocess.call('/home/fernando/Desktop/myproject/myproject/myapp/submitsample.sh '+pathtofile, shell=True)
            latest_dir_analisys = max([os.path.join('/home/fernando/.cuckoo/storage/analyses',d) for d in os.listdir('/home/fernando/.cuckoo/storage/analyses')], key=os.path.getmtime)
            latest_file_sha = max([os.path.join('/home/fernando/.cuckoo/storage/binaries',d) for d in os.listdir('/home/fernando/.cuckoo/storage/binaries')], key=os.path.getmtime)
            latest_file_sha = os.path.basename(latest_file_sha)
            latest_dir_analisys = os.path.basename(latest_dir_analisys)
            filename = request.FILES['docfile'].name
            dirpath = '/home/fernando/.cuckoo/storage/analyses/'+str((int(latest_dir_analisys)+1))+'/'
            newinfo = Path(namefile=filename,idsha256=latest_file_sha,pathto=dirpath) #Ok
            newinfo.save()
            print newinfo.idsha256
            #analisysinfo = Path.objects.create(namefile=filename,idsha256=latest_file_sha,pathto=dirpath)
            return render(request,'submited.html',{'latest_file_sha': latest_file_sha, 'dirpath': dirpath, 'filename': filename})
            

            # Redirect to the document list after POST
            #return HttpResponseRedirect(reverse('upload'))
    else:
        form = DocumentForm()  # A empty, unbound form

    # Render list page with the documents and the form
    return render(request,'upload.html',{'form': form})
def list(request):
    if request.method == 'GET':
        dirtofile=request.GET.get('dir','')
        if(dirtofile!=''):
            pathquery=dirtofile
            pathdata=Path.objects.get(pathto=pathquery) #Ok
            print pathdata.pathto
            print pathdata.idsha256
            with open(pathdata.pathto+'/reports/report.json',) as data_file:
                data=json.load(data_file)
                duration=data['info']['duration']
                infohtml= ''
                analisysinfohtml= ''
                networkudphtml= ''
                networktcphtml= ''
                networkdnshtml= ''
                networkdomainshtml= ''
                machinestatushtml= '' 
                if data['info']['machine']:
                    machinestatus=data['info']['machine']
                    del machinestatus['label']
                    machinestatus['Status']=machinestatus['status']
                    del machinestatus['status']
                    machinestatus['Name']=machinestatus['name']
                    del machinestatus['name']
                    machinestatus['Manager']=machinestatus['manager']
                    del machinestatus['manager']
                    machinestatus['Started on']=machinestatus['started_on']
                    del machinestatus['started_on']
                    machinestatus['Finished on']=machinestatus['shutdown_on']
                    del machinestatus['shutdown_on']
                    machinestatushtml=json2html.convert(json = machinestatus)

                #Info
                
                if data['target']['file']:
                    info=data['target']['file']
                    del info['yara']
                    del info['urls']
                    del info['ssdeep']
                    del info['sha1']
                    info['File Name']=info['name']
                    del info['name']
                    info['SHA256 Identification']=info['sha256']
                    del info['sha256']
                    info['File Path']=info['path']
                    del info['path']
                    info['File Type']=info['type']
                    del info['type']
                    info['File Size']=info['size']
                    del info['size']
                    info['MD5 Identification']=info['md5']
                    del info['md5']
                    del info['crc32']
                    del info['sha512']
                    info['Duration']=duration
                    infohtml=json2html.convert(json = info)

                if data['debug']['log']:
                    analisysinfo=data['debug']['log']
                    analisysinfohtml=json2html.convert(json = analisysinfo)

                #UDP
                
                if data['network']['udp']:
                    networkudp=data['network']['udp']
                    for i in networkudp:
                        i['Destiny']=i['dst']
                        del i['dst']
                        i['Source']=i['src']
                        del i['src']
                        i['Time']=i['time']
                        del i['time']
                        del i['offset']
                        i['Destiny port']=i['dport']
                        del i['dport']
                        i['Source port']=i['sport']
                        del i['sport']
                    networkudphtml=json2html.convert(json = networkudp)
                
                if  data['network']['tcp']:
                    networktcp=data['network']['tcp']
                    for i in networktcp:
                        i['Destiny']=i['dst']
                        del i['dst']
                        i['Source']=i['src']
                        del i['src']
                        i['Time']=i['time']
                        del i['time']
                        del i['offset']
                        i['Destiny port']=i['dport']
                        del i['dport']
                        i['Source port']=i['sport']
                        del i['sport']
                    networktcphtml=json2html.convert(json = networktcp)
                
                if data['network']['dns']:
                    networkdns=data['network']['dns']
                    for i in networkdns:
                        i['Type']=i['type']
                        del i['type']
                        i['Request']=i['request']
                        del i['request']
                        i['Answer']=i['answers']
                        del i['answers']
                    networkdnshtml=json2html.convert(json = networkdns)
                
                if data['network']['domains']:
                    networkdomains=data['network']['domains']
                    for i in networkdomains:
                        i['Domain']=i['domain']
                        del i['domain']
                        i['IP']=i['ip']
                        del i['ip']
                    networkdomainshtml=json2html.convert(json = networkdomains)
                
                
                
                
                
                context={
                'infohtml': infohtml, 
                'analisysinfohtml': analisysinfohtml, 
                'networkudphtml': networkudphtml, 
                'networktcphtml': networktcphtml, 
                'networkdnshtml': networkdnshtml, 
                'networkdomainshtml': networkdomainshtml,
                'machinestatushtml': machinestatushtml,
                }

            return render(request, 'analisys.html', context)
        else:
            query=Path.objects.all()
            for i in query:
                print i.namefile
            return render(request,'list.html',{'query':query})

def submited(request):
    
    return render(request,'list.html')
    
def index(request):
    return render(request,'index.html')

def search(request):

    if request.method == 'POST':
        form = ResultSearch(request.POST)
        if form.is_valid():
            #Path.objects.filter(idsha256__contains=)
            sha256idquery=form.cleaned_data['id']
            #queryid=Path.objects.get(idsha256=sha256id)
            pathdata=Path.objects.get(idsha256=sha256idquery) #Ok
            print pathdata.pathto
            print pathdata.idsha256
            with open(pathdata.pathto+'/reports/report.json',) as data_file:
                data=json.load(data_file)
                duration=data['info']['duration']
                infohtml= ''
                analisysinfohtml= ''
                networkudphtml= ''
                networktcphtml= ''
                networkdnshtml= ''
                networkdomainshtml= ''
                machinestatushtml= '' 
                if data['info']['machine']:
                    machinestatus=data['info']['machine']
                    del machinestatus['label']
                    machinestatus['Status']=machinestatus['status']
                    del machinestatus['status']
                    machinestatus['Name']=machinestatus['name']
                    del machinestatus['name']
                    machinestatus['Manager']=machinestatus['manager']
                    del machinestatus['manager']
                    machinestatus['Started on']=machinestatus['started_on']
                    del machinestatus['started_on']
                    machinestatus['Finished on']=machinestatus['shutdown_on']
                    del machinestatus['shutdown_on']
                    machinestatushtml=json2html.convert(json = machinestatus)

                #Info
                
                if data['target']['file']:
                    info=data['target']['file']
                    del info['yara']
                    del info['urls']
                    del info['ssdeep']
                    del info['sha1']
                    info['File Name']=info['name']
                    del info['name']
                    info['SHA256 Identification']=info['sha256']
                    del info['sha256']
                    info['File Path']=info['path']
                    del info['path']
                    info['File Type']=info['type']
                    del info['type']
                    info['File Size']=info['size']
                    del info['size']
                    info['MD5 Identification']=info['md5']
                    del info['md5']
                    del info['crc32']
                    del info['sha512']
                    info['Duration']=duration
                    infohtml=json2html.convert(json = info)

                if data['debug']['log']:
                    analisysinfo=data['debug']['log']
                    analisysinfohtml=json2html.convert(json = analisysinfo)

                #UDP
                
                if data['network']['udp']:
                    networkudp=data['network']['udp']
                    for i in networkudp:
                        i['Destiny']=i['dst']
                        del i['dst']
                        i['Source']=i['src']
                        del i['src']
                        i['Time']=i['time']
                        del i['time']
                        del i['offset']
                        i['Destiny port']=i['dport']
                        del i['dport']
                        i['Source port']=i['sport']
                        del i['sport']
                    networkudphtml=json2html.convert(json = networkudp)
                
                if  data['network']['tcp']:
                    networktcp=data['network']['tcp']
                    for i in networktcp:
                        i['Destiny']=i['dst']
                        del i['dst']
                        i['Source']=i['src']
                        del i['src']
                        i['Time']=i['time']
                        del i['time']
                        del i['offset']
                        i['Destiny port']=i['dport']
                        del i['dport']
                        i['Source port']=i['sport']
                        del i['sport']
                    networktcphtml=json2html.convert(json = networktcp)
                
                if data['network']['dns']:
                    networkdns=data['network']['dns']
                    for i in networkdns:
                        i['Type']=i['type']
                        del i['type']
                        i['Request']=i['request']
                        del i['request']
                        i['Answer']=i['answers']
                        del i['answers']
                    networkdnshtml=json2html.convert(json = networkdns)
                
                if data['network']['domains']:
                    networkdomains=data['network']['domains']
                    for i in networkdomains:
                        i['Domain']=i['domain']
                        del i['domain']
                        i['IP']=i['ip']
                        del i['ip']
                    networkdomainshtml=json2html.convert(json = networkdomains)
                
                
                
                
                
                context={
                'infohtml': infohtml, 
                'analisysinfohtml': analisysinfohtml, 
                'networkudphtml': networkudphtml, 
                'networktcphtml': networktcphtml, 
                'networkdnshtml': networkdnshtml, 
                'networkdomainshtml': networkdomainshtml,
                'machinestatushtml': machinestatushtml,
                }

            return render(request, 'analisys.html', context)

       
    else:
        return render(request,'search.html')

def report(request):
    with open('/home/fernando/.cuckoo/storage/analyses/latest/reports/report.json',) as data_file:
            filedata = data_file.read()
            filedata = filedata.replace('\n','<br>')
    return render(request,'report.html',{'filedata':filedata})

def dashboard(request):
    with open('/home/fernando/.cuckoo/storage/analyses/latest/reports/report.json') as data_file:
        data=json.load(data_file)
        duration=data['info']['duration']
        infohtml= ''
        analisysinfohtml= ''
        networkudphtml= ''
        networktcphtml= ''
        networkdnshtml= ''
        networkdomainshtml= ''
        machinestatushtml= '' 
        if data['info']['machine']:
            machinestatus=data['info']['machine']
            del machinestatus['label']
            machinestatus['Status']=machinestatus['status']
            del machinestatus['status']
            machinestatus['Name']=machinestatus['name']
            del machinestatus['name']
            machinestatus['Manager']=machinestatus['manager']
            del machinestatus['manager']
            machinestatus['Started on']=machinestatus['started_on']
            del machinestatus['started_on']
            machinestatus['Finished on']=machinestatus['shutdown_on']
            del machinestatus['shutdown_on']
            machinestatushtml=json2html.convert(json = machinestatus)

        #Info
        
        if data['target']['file']:
            info=data['target']['file']
            del info['yara']
            del info['urls']
            del info['ssdeep']
            del info['sha1']
            info['File Name']=info['name']
            del info['name']
            info['SHA256 Identification']=info['sha256']
            del info['sha256']
            info['File Path']=info['path']
            del info['path']
            info['File Type']=info['type']
            del info['type']
            info['File Size']=info['size']
            del info['size']
            info['MD5 Identification']=info['md5']
            del info['md5']
            del info['crc32']
            del info['sha512']
            info['Duration']=duration
            infohtml=json2html.convert(json = info)

        if data['debug']['log']:
            analisysinfo=data['debug']['log']
            analisysinfohtml=json2html.convert(json = analisysinfo)

        #UDP
        
        if data['network']['udp']:
            networkudp=data['network']['udp']
            for i in networkudp:
                i['Destiny']=i['dst']
                del i['dst']
                i['Source']=i['src']
                del i['src']
                i['Time']=i['time']
                del i['time']
                del i['offset']
                i['Destiny port']=i['dport']
                del i['dport']
                i['Source port']=i['sport']
                del i['sport']
            networkudphtml=json2html.convert(json = networkudp)
        
        if  data['network']['tcp']:
            networktcp=data['network']['tcp']
            for i in networktcp:
                i['Destiny']=i['dst']
                del i['dst']
                i['Source']=i['src']
                del i['src']
                i['Time']=i['time']
                del i['time']
                del i['offset']
                i['Destiny port']=i['dport']
                del i['dport']
                i['Source port']=i['sport']
                del i['sport']
            networktcphtml=json2html.convert(json = networktcp)
        
        if data['network']['dns']:
            networkdns=data['network']['dns']
            for i in networkdns:
                i['Type']=i['type']
                del i['type']
                i['Request']=i['request']
                del i['request']
                i['Answer']=i['answers']
                del i['answers']
            networkdnshtml=json2html.convert(json = networkdns)
        
        if data['network']['domains']:
            networkdomains=data['network']['domains']
            for i in networkdomains:
                i['Domain']=i['domain']
                del i['domain']
                i['IP']=i['ip']
                del i['ip']
            networkdomainshtml=json2html.convert(json = networkdomains)
        
        
        
        
        
        context={
        'infohtml': infohtml, 
        'analisysinfohtml': analisysinfohtml, 
        'networkudphtml': networkudphtml, 
        'networktcphtml': networktcphtml, 
        'networkdnshtml': networkdnshtml, 
        'networkdomainshtml': networkdomainshtml,
        'machinestatushtml': machinestatushtml,
        }

    return render(request, 'analisys.html', context)


